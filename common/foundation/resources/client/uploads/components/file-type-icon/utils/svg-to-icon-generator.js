/**\n * Utility to generate React icon components from SVG files in public/fileicons\n * This utility can be used to automatically create icon components when new SVG files are added\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Convert SVG content to React component string\n * @param {string} svgContent - The SVG file content\n * @param {string} componentName - The name of the React component\n * @returns {string} - The React component code\n */\nfunction svgToReactComponent(svgContent, componentName) {\n  // Remove XML declaration and extract SVG content\n  let cleanedSvg = svgContent.replace(/<\\?xml[^>]*>/g, '').trim();\n  \n  // Extract the content inside the SVG tag\n  const svgMatch = cleanedSvg.match(/<svg[^>]*>([\\s\\S]*?)<\\/svg>/i);\n  if (!svgMatch) {\n    throw new Error('Invalid SVG content');\n  }\n  \n  const svgInnerContent = svgMatch[1];\n  \n  // Convert class attributes to className and style objects\n  let reactContent = svgInnerContent\n    .replace(/class=\"([^\"]*)\"/g, 'className=\"$1\"')\n    .replace(/fill=\"([^\"]*)\"/g, 'fill=\"$1\"')\n    .replace(/stroke=\"([^\"]*)\"/g, 'stroke=\"$1\"');\n  \n  // Generate the React component\n  const componentCode = `import { createSvgIcon } from '@ui/icons/create-svg-icon';\n\nexport const ${componentName} = createSvgIcon(\n  <g>\n    ${reactContent}\n  </g>\n);`;\n  \n  return componentCode;\n}\n\n/**\n * Generate icon components from all SVG files in the fileicons directory\n * @param {string} svgDir - Path to the directory containing SVG files\n * @param {string} outputDir - Path to the output directory for generated components\n */\nfunction generateIconComponents(svgDir = '../../../public/fileicons', outputDir = '../icons') {\n  const svgDirectory = path.resolve(__dirname, svgDir);\n  const iconOutputDir = path.resolve(__dirname, outputDir);\n  \n  if (!fs.existsSync(svgDirectory)) {\n    console.error('SVG directory not found:', svgDirectory);\n    return;\n  }\n  \n  if (!fs.existsSync(iconOutputDir)) {\n    fs.mkdirSync(iconOutputDir, { recursive: true });\n  }\n  \n  const svgFiles = fs.readdirSync(svgDirectory).filter(file => file.endsWith('.svg'));\n  \n  svgFiles.forEach(svgFile => {\n    const svgPath = path.join(svgDirectory, svgFile);\n    const svgContent = fs.readFileSync(svgPath, 'utf8');\n    \n    // Generate component name (e.g., 'archive.svg' -> 'ArchiveIcon')\n    const baseName = path.basename(svgFile, '.svg');\n    const componentName = baseName.charAt(0).toUpperCase() + baseName.slice(1) + 'Icon';\n    \n    try {\n      const componentCode = svgToReactComponent(svgContent, componentName);\n      const outputPath = path.join(iconOutputDir, `${baseName}-icon.jsx`);\n      \n      fs.writeFileSync(outputPath, componentCode);\n      console.log(`Generated: ${outputPath}`);\n    } catch (error) {\n      console.error(`Error processing ${svgFile}:`, error.message);\n    }\n  });\n}\n\n/**\n * Generate an index file that exports all icon components\n * @param {string} outputDir - Path to the output directory\n */\nfunction generateIndexFile(outputDir = '../icons') {\n  const iconOutputDir = path.resolve(__dirname, outputDir);\n  const iconFiles = fs.readdirSync(iconOutputDir).filter(file => file.endsWith('-icon.jsx'));\n  \n  let indexContent = '// Auto-generated index file for file type icons\\n\\n';\n  \n  // Generate imports\n  iconFiles.forEach(iconFile => {\n    const baseName = path.basename(iconFile, '-icon.jsx');\n    const componentName = baseName.charAt(0).toUpperCase() + baseName.slice(1) + 'Icon';\n    const importName = `{ ${componentName} }`;\n    indexContent += `export ${importName} from './${iconFile}';\\n`;\n  });\n  \n  const indexPath = path.join(iconOutputDir, 'index.js');\n  fs.writeFileSync(indexPath, indexContent);\n  console.log(`Generated index file: ${indexPath}`);\n}\n\n/**\n * Main function to generate all icon components and index file\n */\nfunction generateAllIcons() {\n  console.log('Generating icon components from SVG files...');\n  generateIconComponents();\n  generateIndexFile();\n  console.log('Icon generation complete!');\n}\n\n// CLI usage\nif (require.main === module) {\n  generateAllIcons();\n}\n\nmodule.exports = {\n  svgToReactComponent,\n  generateIconComponents,\n  generateIndexFile,\n  generateAllIcons\n};